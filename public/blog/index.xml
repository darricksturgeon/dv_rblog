<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Darrick Sturgeon</title>
    <link>/blog/</link>
    <description>Recent content in Blog on Darrick Sturgeon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 14 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>American Brewing: IBUs and ABV</title>
      <link>/blog/american-brewing-ibus-and-abv/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/american-brewing-ibus-and-abv/</guid>
      <description>beer &amp;lt;- read_csv(&amp;quot;/home/datys/Downloads/beers.csv&amp;quot;) ## Warning: Missing column names filled in: &amp;#39;X1&amp;#39; [1] ## Parsed with column specification: ## cols( ## X1 = col_integer(), ## abv = col_double(), ## ibu = col_double(), ## id = col_integer(), ## name = col_character(), ## style = col_character(), ## brewery_id = col_integer(), ## ounces = col_double() ## ) popular_beers &amp;lt;- beer %&amp;gt;% filter(style %in% c(&amp;quot;American IPA&amp;quot;, &amp;quot;American Brown Ale&amp;quot;, &amp;quot;American Porter&amp;quot;, &amp;quot;American Pale Ale (APA)&amp;quot;, &amp;quot;Witbier&amp;quot;, &amp;quot;American Amber / Red Ale&amp;quot;, &amp;quot;American Blond Ale&amp;quot;)) %&amp;gt;% filter(!</description>
    </item>
    
    <item>
      <title>Gapminder: Continental Life Expectancies</title>
      <link>/blog/gapminder-continental-life-expectancies/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/gapminder-continental-life-expectancies/</guid>
      <description>Here we take a look at countries with low life expectancy across continents.
gapm &amp;lt;- gapminder gapm_lifeexp &amp;lt;- gapm %&amp;gt;% group_by(year, continent) %&amp;gt;% filter(lifeExp &amp;lt;= quantile(lifeExp, .25)) %&amp;gt;% arrange(continent, year, lifeExp) gapm_lifeexp &amp;lt;- gapm_lifeexp %&amp;gt;% filter(continent != &amp;#39;Oceania&amp;#39;) ggplot(gapm_lifeexp, aes(x = year, y = lifeExp, color = continent)) + geom_point(alpha = 0.2) + geom_smooth(method = &amp;#39;lm&amp;#39;, se = FALSE, alpha = 1) + scale_color_brewer(type = &amp;#39;qual&amp;#39;, palette = 2) Type of Graph This is a scatter plot with linear fit lines.</description>
    </item>
    
    <item>
      <title>Gapminder: GDP Per Capita</title>
      <link>/blog/gapminder-gdp-per-capita/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/gapminder-gdp-per-capita/</guid>
      <description>Here we take a look at country GDP per capita across different continents from 1950 to present.
gapm &amp;lt;- gapminder gapm_gdpextrema &amp;lt;- gapm %&amp;gt;% group_by(continent, year) %&amp;gt;% filter(gdpPercap == max(gdpPercap) | gdpPercap == min(gdpPercap)) %&amp;gt;% mutate(extrema = factor(case_when(gdpPercap == max(gdpPercap) ~ &amp;#39;max&amp;#39;, gdpPercap == min(gdpPercap) ~ &amp;#39;min&amp;#39;))) %&amp;gt;% arrange(continent, country, year, gdpPercap) gapm_gdpextrema_notasia &amp;lt;- gapm_gdpextrema %&amp;gt;% filter(continent != &amp;#39;Asia&amp;#39;) gapm_gdpextrema_asia &amp;lt;- gapm_gdpextrema %&amp;gt;% filter(continent == &amp;#39;Asia&amp;#39;) p1 &amp;lt;- ggplot(gapm_gdpextrema_notasia, aes(x = year, y = gdpPercap, color = continent)) + geom_point(alpha = 0.</description>
    </item>
    
    <item>
      <title>Example article</title>
      <link>/blog/example-article/</link>
      <pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/example-article/</guid>
      <description>Text This is some text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut pretium at ipsum eu pharetra. Proin ac ante et leo ultrices bibendum. Vivamus id ipsum fermentum, aliquam nunc mollis, tempus sapien. Praesent scelerisque cursus eros vitae pretium. Etiam sit amet ligula in leo euismod malesuada. Proin eleifend pulvinar ipsum, eu lobortis ante pharetra eu. Vivamus sem elit, venenatis eget ornare nec, ullamcorper non tellus. Duis quis massa finibus, euismod erat quis, fermentum nunc.</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/blog/hello-r-markdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/blog/hello-r-markdown/</guid>
      <description>R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/blog/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/blog/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/hugo-template-primer/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/blog/getting-started-with-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/getting-started-with-hugo/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>