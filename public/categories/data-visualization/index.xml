<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Visualization on Darrick Sturgeon</title>
    <link>/categories/data-visualization/</link>
    <description>Recent content in Data Visualization on Darrick Sturgeon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 17 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/data-visualization/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GMMs: visualization using PCA</title>
      <link>/blog/gmms-visualization-using-pca/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/gmms-visualization-using-pca/</guid>
      <description>data &amp;lt;- iris[, !(names(iris) %in% c(&amp;#39;Species&amp;#39;))] set.seed(7) mvn &amp;lt;- mvnormalmixEM(data, k = 3) number of iterations= 55  pca &amp;lt;- prcomp(data, scale=TRUE, center=TRUE) comps &amp;lt;- data.frame(pca$x) colnames(comps) &amp;lt;- c(&amp;#39;pc1&amp;#39;, &amp;#39;pc2&amp;#39;, &amp;#39;pc3&amp;#39;, &amp;#39;pc4&amp;#39;) comps$Species &amp;lt;- iris$Species tmp &amp;lt;- as.data.frame(mvn$posterior) %&amp;gt;% mutate(cls=apply(.[,], 1, function(x) names(x)[which.max(x)])) %&amp;gt;% select(cls) comps$cls &amp;lt;- tmp$cls comps &amp;lt;- comps %&amp;gt;% mutate(cls = factor(cls)) comps &amp;lt;- comps %&amp;gt;% mutate(correct = case_when(Species == &amp;#39;setosa&amp;#39; &amp;amp; cls == &amp;#39;comp.1&amp;#39; ~ TRUE, Species == &amp;#39;versicolor&amp;#39; &amp;amp; cls == &amp;#39;comp.</description>
    </item>
    
    <item>
      <title>GMMs: visualization using PCA</title>
      <link>/projects/gmms-visualization-using-pca/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/projects/gmms-visualization-using-pca/</guid>
      <description>The Dataset I chose the cran built-in iris dataset.
Iris Dataset
 This dataset is a very nice dataset for clustering.
Sorry for choosing an easy dataset! I had meant to work through the visualization first and repeat this with a more interesting example.
 The Data data &amp;lt;- iris[, !(names(iris) %in% c(&amp;#39;Species&amp;#39;))] # filter out classes for training ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) + geom_point() + ggtitle(&amp;#39;IRIS&amp;#39;) + xlab(&amp;#39;Sepal Width&amp;#39;) + ylab(&amp;#39;Sepal Length&amp;#39;)  The Objective The goal is to explore the data using clustering methods.</description>
    </item>
    
    <item>
      <title>American Brewing: IBUs and ABV</title>
      <link>/blog/american-brewing-ibus-and-abv/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/american-brewing-ibus-and-abv/</guid>
      <description>beer &amp;lt;- read_csv(&amp;quot;/home/datys/Downloads/beers.csv&amp;quot;) popular_beers &amp;lt;- beer %&amp;gt;% filter(style %in% c(&amp;quot;American IPA&amp;quot;, &amp;quot;American Brown Ale&amp;quot;, &amp;quot;American Porter&amp;quot;, &amp;quot;American Pale Ale (APA)&amp;quot;, &amp;quot;Witbier&amp;quot;, &amp;quot;American Amber / Red Ale&amp;quot;, &amp;quot;American Blond Ale&amp;quot;)) %&amp;gt;% filter(!is.na(abv)) %&amp;gt;% filter(!is.na(ibu)) # I want to include several types of beer here, and include them in the same plot somehow. beerplot &amp;lt;-ggplot(popular_beers, aes(x = abv, y = ibu, color = style)) + geom_point() + theme(axis.text.x = element_text(angle = 30, hjust = 1)) + ggtitle(&amp;quot;ABV vs IBU in American IPAs&amp;quot;) + theme_bw() + scale_color_colorblind() beerplot Type of Graph This is a scatter plot.</description>
    </item>
    
    <item>
      <title>Gapminder: Continental Life Expectancies</title>
      <link>/blog/gapminder-continental-life-expectancies/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/gapminder-continental-life-expectancies/</guid>
      <description>Here we take a look at countries with low life expectancy across continents.
gapm &amp;lt;- gapminder gapm_lifeexp &amp;lt;- gapm %&amp;gt;% group_by(year, continent) %&amp;gt;% filter(lifeExp &amp;lt;= quantile(lifeExp, .25)) %&amp;gt;% arrange(continent, year, lifeExp) gapm_lifeexp &amp;lt;- gapm_lifeexp %&amp;gt;% filter(continent != &amp;#39;Oceania&amp;#39;) ggplot(gapm_lifeexp, aes(x = year, y = lifeExp, color = continent)) + geom_point(alpha = 0.2) + geom_smooth(method = &amp;#39;lm&amp;#39;, se = FALSE, alpha = 1) + scale_color_brewer(type = &amp;#39;qual&amp;#39;, palette = 2) Type of Graph This is a scatter plot with linear fit lines.</description>
    </item>
    
    <item>
      <title>Gapminder: GDP Per Capita</title>
      <link>/blog/gapminder-gdp-per-capita/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/gapminder-gdp-per-capita/</guid>
      <description>Here we take a look at country GDP per capita across different continents from 1950 to present.
gapm &amp;lt;- gapminder gapm_gdpextrema &amp;lt;- gapm %&amp;gt;% group_by(continent, year) %&amp;gt;% filter(gdpPercap == max(gdpPercap) | gdpPercap == min(gdpPercap)) %&amp;gt;% mutate(extrema = factor(case_when(gdpPercap == max(gdpPercap) ~ &amp;#39;max&amp;#39;, gdpPercap == min(gdpPercap) ~ &amp;#39;min&amp;#39;))) %&amp;gt;% arrange(continent, country, year, gdpPercap) gapm_gdpextrema_notasia &amp;lt;- gapm_gdpextrema %&amp;gt;% filter(continent != &amp;#39;Asia&amp;#39;) gapm_gdpextrema_asia &amp;lt;- gapm_gdpextrema %&amp;gt;% filter(continent == &amp;#39;Asia&amp;#39;) p1 &amp;lt;- ggplot(gapm_gdpextrema_notasia, aes(x = year, y = gdpPercap, color = continent)) + geom_point(alpha = 0.</description>
    </item>
    
    <item>
      <title>Housing Quality Ratings</title>
      <link>/blog/housing-quality-ratings/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/housing-quality-ratings/</guid>
      <description>Exploring the distribution of House Sale Prices by quality rating
violin &amp;lt;- ggplot(housing_numeric, aes(x = OverallQual, y = SalePrice, fill = OverallQual)) + geom_violin() + ggtitle(&amp;#39;Housing Sale Price By Quality Rating&amp;#39;) + scale_y_continuous(labels = comma) + xlab(&amp;#39;Quality&amp;#39;) + ylab(&amp;#39;Sale Price ($)&amp;#39;) + theme_bw() + labs(fill = &amp;quot;Quality&amp;quot;) violin + geom_boxplot(width=0.1) Violin Plots Violin plots display a mirrored histogram or pdf of a dataset along the y-axis, typically separated by category to show how the historgram changes across a factor variable.</description>
    </item>
    
  </channel>
</rss>